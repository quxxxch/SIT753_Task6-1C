pipeline {
    agent any
    environment {
        DIRECTORY_PATH = '/path'
        TESTING_ENVIRONMENT = 'test-env'
        PRODUCTION_ENVIRONMENT = 'production-env' 
        EMAIL_RECIPIENT = 'iamhgq@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                echo "fetch the source code from the directory path: $DIRECTORY_PATH"
                echo "This sh step 'mvn -B -DskipTests clean package' runs the Maven command to cleanly build your Java application without running any tests."
               // sh 'mvn -B -DskipTests clean package'
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                echo "run unit tests to ensure the code functions as expected"
                echo "run integration tests to ensure the different components of the application work together as expected"
                echo "We can run mvn test if want to run Maven phases up to and including test, or mvn clean verify if want to rebuild and test the project."
                echo "This sh step 'mvn test' executes the Maven command to run the unit test. This command also generates a JUnit XML report, which is saved to the target/surefire-reports directory within the /var/jenkins_home/workspace/simple-java-maven-app directory in the Jenkins container."
                // sh 'mvn test'
            }
            post {
                success {
                    script {
                    currentBuild.result = 'SUCCESS'
                }
                                
                }
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
                always {
                    emailext(
                        attachLog: true,
                        subject: "Unit and Integration Tests Stage Status",
                        body: "Unit and Integration Tests Stage Status: $currentBuild.result ; and Log Attached",
                        to: EMAIL_RECIPIENT
                    )
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo "check the quality of the code"
                echo 'Analyzing code...'

                echo "Run SonarQube Code Analysis in Jenkins with Maven Project: 'mvn sonar:sonar'"

                // sh 'mvn sonar:sonar'
            }
        }

        stage('Security Scan') {
            steps {
                echo "Perform security scan on the code using a tool to identify any vulnerabilities. We can use 'mvn org.owasp:dependency-check-maven:check' to perform it"

                // sh 'mvn org.owasp:dependency-check-maven:check'
            }
            post {
                success {
                    script {
                    currentBuild.result = 'SUCCESS'
                }
                                
                }
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
                always {
                    emailext(
                        attachLog: true,
                        subject: "Security Scan Stage Status",
                        body: "Security Scan Stage Status: $currentBuild.result ; and Log Attached",
                        to: EMAIL_RECIPIENT
                    )
                }
            }
        }

        stage('Deploy to Staging ') {
            steps {
                echo 'Deploy the application to a staging server: AWS EC2'

            }
        }

        stage('Integration Tests on Staging') {
            steps {
               echo "Running integration tests on staging..."
            }
        }

         stage('Deploy to Production') {
            steps {
                echo "deploy the application to the production server: AWS EC2"

            }
        }

    }
post {
success {
                    script {
                    currentBuild.result = 'SUCCESS'
                }
                                
                }
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                    }
                }
                always {
                    emailext(
                        attachLog: true,
                        subject: "Pipeline status",
                        body: "Pipeline Status: $currentBuild.result ; and Log Attached",
                        to: EMAIL_RECIPIENT
                    )
                }
            }
    
}
